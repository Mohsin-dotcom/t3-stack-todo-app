import { useEffect, useState, FC } from "react";
import { todoList } from "@prisma/client";
import Head from "next/head";
import Modal from "../components/Modal";

import { trpc } from '../utils/trpc';
import { motion } from 'framer-motion'

import { createProxySSGHelpers } from '@trpc/react-query/ssg';
import { createContext } from "../server/trpc/context";
import { appRouter } from "../server/trpc/router/_app";

import superjson from 'superjson';


interface HomeProps {
  trpcState: any
}

const Home: FC<HomeProps> = ({ trpcState }) => {
  const [itemsList, setItemsList] = useState<todoList[]>([]);
  const [checkedItems, setCheckedItems] = useState<todoList[]>([])
  const [showModal, setShowModal] = useState<boolean>(false);

  const { mutate: deleteMutation } = trpc.item.deleteTodo.useMutation();
  const { mutate: completeTodoMutation } = trpc.item.completedTodo.useMutation();

  // const { data: todoList, isLoading, isSuccess } = trpc.item.getAllTodos.useQuery();
  const { data: todoList, status } = trpcState.json.queries[0].state;

  useEffect(() => {
    if (status.toLowerCase() === 'success') {
      setItemsList(todoList);
      //getting completed todos
      const checked = todoList.filter((item: any) => item.checked);
      setCheckedItems(checked);
    }
  }, [status])

  const deleteTodo = (id: string) => {
    deleteMutation({ id }, {
      onSuccess(todo) {
        setItemsList((prev) => prev.filter((item) => item.id !== todo.id))
      }
    });
  };

  const handleTodoCompletion = (id: string, checked: boolean) => {
    completeTodoMutation({ id, checked }, {
      onSuccess(todoItem) {
        // check if this todo is already completed
        if (checkedItems.some((item) => item.id === todoItem.id)) {
          // remove it from the completed todos
          setCheckedItems((prev) => prev.filter((item) => item.id !== todoItem.id))
        } else {
          // add it to the checked items
          setCheckedItems((prev) => [...prev, todoItem])
        }
      },
    })
  }

  if (!todoList) return <p>Loading Todos...</p>

  return (
    <>
      <Head>
        <title>Ocookie Todo app</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>


      <main className="mx-auto my-12 max-w-3xl">
        <div className="flex justify-between">
          <h2 className="text-2xl font-semibold"> My Todo list</h2>
          <button
            type="button"
            onClick={() => setShowModal(true)}
            className="bg-violet-500 text-sm text-white p-2 rounded-md transition hover:bg-violet-600 "
          >
            Add item
          </button>
        </div>

        <ul className="mt-4">
          {itemsList?.map((item, index) => (
            <li key={index} className="flex justify-between items-center mt-4 w-full">
              <div className="relative cursor-pointer">
                <div className='pointer-events-none absolute inset-0 flex origin-left items-center justify-center '>
                  <motion.div
                    initial={{ width: 0 }}
                    animate={{ width: checkedItems.some((checkedItem) => checkedItem.id === item.id) ? '100%' : 0 }}
                    transition={{ duration: 0.2, ease: 'easeInOut' }}
                    className='h-[2px] w-full translate-y-px bg-red-400'
                  />
                </div>
                <span
                  onClick={() =>
                    handleTodoCompletion(item.id,
                      checkedItems.some((checkedItem) => checkedItem.id === item.id) ? false : true)}
                >
                  {item.name}
                </span>
              </div>
              <button
                type="button"
                onClick={() => deleteTodo(item.id)}
                className="bg-red-500 hover:bg-red-700 text-white text-sm p-2 cursor-pointer px-4 rounded"
              >
                Delete
              </button>
            </li>
          ))}
        </ul>
      </main>

      {showModal && <Modal setShowModal={setShowModal} setItemsList={setItemsList} />}
    </>
  );
};

export async function getServerSideProps(context: any) {
  const ssg = createProxySSGHelpers({
    router: appRouter,
    ctx: await createContext(context),
    transformer: superjson,
  });
  /*
   * `prefetch` does not return the result and never throws - if you need that behavior, use `fetch` instead.
   */
  await ssg.item.getAllTodos.prefetch();
  return {
    props: {
      trpcState: ssg.dehydrate(),
    },
  };
}

export default Home;
